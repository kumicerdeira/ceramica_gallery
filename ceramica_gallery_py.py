# -*- coding: utf-8 -*-
"""ceramica_gallery.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bBmaLReJlIilJQmBD-u1IMflrFEDjuU5
"""

import pandas as pd

# 空のデータテンプレートを作成 crear data plate bacio
data = {
    "id_obra": [],
    "nombre_obra": [],
    "fecha_creacion": [],
    "tipo_barro": [],
    "tipo_esmaltado": [],
    "temperatura_coccion": [],
    "metodo_coccion": [],
    "notas_proceso": [],
    "ruta_foto": [],
    "tamano": [],
    "peso": [],
    "nombre_serie": []
}

df = pd.DataFrame(data)
# サンプル行を追加（例） sample(elemplo)
new_row = pd.DataFrame([{
    "id_obra": "001",
    "nombre_obra": "Cuenco tono marron",
    "fecha_creacion": "2025-07-16",
    "tipo_barro": "Barro GM",
    "tipo_esmaltado": "Engove blanco,marron y naranja,Esmalte termoku y blanco",
    "temperatura_coccion": 1250,
    "metodo_coccion": "Horno Eléctrico",
    "notas_proceso": "Engove",
    "ruta_foto": "IMG_0083.jpg",
    "tamano": "9cm x 6cm",
    "peso": 118,
    "nombre_serie": "Serie tierra"
    }])

#concatで結合
df = pd.concat([df, new_row], ignore_index=True)

# CSVで保存 guardar CSV
df.to_csv("ceramica_template.csv", index=False)

#esmalte_fotoの欄を追加
df["esmalte_foto"] = ""

# id_obraが"001"の行のインデックスを取得
index = df[df["id_obra"] == "001"].index

# 特定の列を編集,リスト形式で保存　写真を追加
df.loc[index, "esmalte_foto"] = "['IMG_9596.jpg']"

#後にリスト形式で表示が可能
import ast
fotos = ast.literal_eval(df.loc[index[0], "esmalte_foto"])
# → ['ruta_foto/IMG_9256.jpg', 'ruta_foto/IMG_9596.jpg']

#保存
df.to_csv("ceramica_template.csv", index=False)

#新しい作品の追加
new_row = pd.DataFrame([{
    "id_obra": "002",
    "nombre_obra": "Cuenco tono verde",
    "fecha_creacion": "2025-07-16",
    "tipo_barro": "Barro GM",
    "tipo_esmaltado": "Engove marron y blanco,Esmalte verde",
    "esmalte_foto": "IMG_9593.jpg",
    "temperatura_coccion": 1250,
    "metodo_coccion": "Horno Eléctrico",
    "notas_proceso": "Engove",
    "ruta_foto": "IMG_0131.jpg",
    "tamano": "8.5cm x 7cm",
    "peso": 145,
    "nombre_serie": "Serie tierra"
    }])

#concatで結合
df = pd.concat([df, new_row], ignore_index=True)

# CSVで保存 guardar CSV
df.to_csv("ceramica_template.csv", index=False)

new_row = pd.DataFrame([{
    "id_obra": "003",
    "nombre_obra": "Cuenco tono verde",
    "fecha_creacion": "2025-07-16",
    "tipo_barro": "Barro BT",
    "tipo_esmaltado": "Engove marron y blanco,Esmalte verde",
    "esmalte_foto": "IMG_9996.jpg",
    "temperatura_coccion": 1250,
    "metodo_coccion": "Horno Eléctrico",
    "notas_proceso": "Engove",
    "ruta_foto": "IMG_0133.jpg",
    "tamano": "10cm x 7cm",
    "peso": 346,
    "nombre_serie": "Serie tierra"
    }])

#concatで結合
df = pd.concat([df, new_row], ignore_index=True)

# CSVで保存 guardar CSV
df.to_csv("ceramica_template.csv", index=False)

import pandas as pd

# 先ほど作ったCSVファイルを読み込む（ファイル名は適宜変更してください）
df = pd.read_csv("ceramica_template.csv")

# データの先頭5行を表示
print(df.head())

# 例えば、釉薬の種類（tipo_barro）が「Barro GM」の作品だけ抽出して表示
brillante = df[df["tipo_barro"] == "Barro GM"]
print(brillante)

df["id_obra"] = df["id_obra"].astype(str)
print(df["id_obra"].astype(str))

print(df["id_obra"].head())
#id_obraが整数なのか文字列なのかをチェック

print(df[df["id_obra"] == "1"]["ruta_foto"].values[0])
#文字列なので、""をつけて検索

from PIL import Image
import matplotlib.pyplot as plt
import os
#画像表示用のインポート

import ast
from PIL import Image
import matplotlib.pyplot as plt
import os

# ① 画像フォルダのパス（適宜変更）
image_folder = "/Users/nishizakakumi/Desktop/ruta_foto"

# ② IDを指定（文字列で！）
target_id = "1"

# ③ 対象行を取得
row = df[df["id_obra"] == target_id]

# ④ データがあるか確認
if not row.empty:
    # ⑤ 画像ファイル名をリストに変換
    image_filenames_str = row["ruta_foto"].values[0]

    try:
        image_list = ast.literal_eval(image_filenames_str)
        if isinstance(image_list, str):
            image_list = [image_list]  # カンマ区切り文字列対応
    except:
        image_list = [image_filenames_str]  # 文字列の場合

    # ⑥ 画像表示ループ
    for filename in image_list:
        image_path = os.path.join(image_folder, filename.strip())
        print("image_path:", image_path)
        print("exists:", os.path.exists(image_path))
    if os.path.exists(image_path):
            img = Image.open(image_path)
            plt.imshow(img)
            plt.axis('off')
            plt.title(filename)
            plt.show()
    else:
            print(f"⚠️ ファイルが見つかりません: {image_path}")
else:
     print(f"⚠️ id_obra が {target_id} のデータが見つかりません。")

#データの可視化
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter

# グラフ作成
sns.histplot(df['temperatura_coccion'], bins=20, kde=True)
sns.set_palette("pastel")

# 焼成温度のヒストグラム（分布）
sns.histplot(df['temperatura_coccion'], bins=20, kde=True)
plt.title('Distribución de la temperatura de cocción')
plt.xlabel('Temperatura de cocción (℃)')
plt.ylabel('Cantidad de piezas')
# x軸の数値を指数表記から通常の整数に変換
plt.gca().xaxis.set_major_formatter(FuncFormatter(lambda x, _: f'{int(x)}'))
plt.tight_layout()
#１０００から１３００の間の１００ごとに目盛りをおく
import numpy as np
plt.xticks(np.arange(1000, 1350, 50))
plt.show()

# 釉薬の使用頻度（棒グラフ）
glaze_counts = df['tipo_esmaltado'].value_counts()
glaze_counts.plot(kind='bar')
sns.set_palette("muted")
plt.title('Frecuencia de uso de esmaltes')
plt.xlabel('Esmaltes')
plt.ylabel('Cantidad de piezas')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

print(df.columns)

#streamlit_app.py アプリの作成

import streamlit as st
import pandas as pd
from PIL import Image
import os

st.title("gallery de piezas de ceramica")

uploaded_file = st.file_uploader("upload CSV file", type="csv")

if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)
    st.dataframe(df)

    glaze_filter = st.selectbox("filter from esmalte", options=["ALL"] + df["tipo_esmaltado"].dropna().unique().tolist())
    if glaze_filter !="ALL":
        df = df[df["tipo_esmaltado"] == glaze_filter]


    # barro（土の種類）フィルター
    barro_filter = st.selectbox(
        "filter from tipo de barro",
        options=["ALL"] + df["tipo_barro"].dropna().unique().tolist()
    )
    if barro_filter != "ALL":
        df = df[df["tipo_barro"] == barro_filter]


         # 画像フォルダのパスを指定
    image_folder = "."

    for i, row in df.iterrows():
        st.subheader(row["nombre_obra"])
        st.write(f"esmarte: {row['tipo_esmaltado']}, temperatura de coccion:{row['temperatura_coccion']}℃")

         # ruta_foto がカンマ区切りで複数ある場合は分割して表示
        fotos = [f.strip() for f in str(row["ruta_foto"]).split(",")]

        for foto in fotos:
            image_path = os.path.join(image_folder, foto)
            print("Checking image path:", image_path)
            print("File exists?", os.path.exists(image_path))
            if os.path.exists(image_path):
                st.image(image_path, width=300, caption=row["id_obra"])
            else:
                st.warning("No se encontró la foto.")

        st.markdown("---")

